---

name: Safe Vote Pipeline

on:
  push:
    branches:
      - main  # main branch

jobs:
  build:
    runs-on:  ubuntu-latest
    steps:
      - name: Checkout code from bitbucket
        uses: actions/checkout@v2
      - name: Set Short SHA
        run: |
          echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV
      - name:  Build Docker Image
        run: |
          docker build -t mosesade/webapp-safe-vote:${{ env.SHORT_SHA }} .
      - name:  Login to Dockerhub
        run:  |
          echo "${{ secrets.DOCKERHUB_PASS }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Push Image to Dockerhub
        run:  |
          docker push mosesade/webapp-safe-vote:${{ env.SHORT_SHA }}

  deploy:
    runs-on:  ubuntu-latest
    steps:
      - name: Deploy Safe vote
        run:  |
          aws ecs update-service --cluster safevote-cluster --service safevote-service

  validate:
    runs-on:  ubuntu-latest
    steps:
      - name: Simple smoke test
        run:  |
          curl -f https:safevote.fi/health || exit 1
      - name: Notification on Successful deployment
        if: success()
        run:  |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment of SafeVote completed and successfully!!!"}' https://hooks.slack.com/services/BBBB/AAAA/CCCC
      - name: Notificationupon failure
        if: failure()
        run:  |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment of SafeVote failed!!"}' https://hooks.slack.com/services/BBBB/AAAA/CCCC

  deploy_backend:
    runs-on:  ubuntu-latest
    steps:
      - name: Set SSH access
        use:  ssh-agent@v0.5.2
        with:
          ssh-private-key:  ${{ secrets.SSH_PRIVATE_KEY }}
      - name:  Download latest Backend Build
        run:  |
          wget ${{ secrets.BACKEND_BUILD_URL }} -O latest-backend.tar.gz
      - name: Install latest backend on the server
        run:  |
          rm -rf /path/to/old/backend
          ssh -o StrictHostKeyChecking=no ${{ secrets.SUT_SSH_USER }}@$SUT_IP_ADDRESS << 'EOF'
            tar -xzvf latest-backend.tar.gz
            systemctl restart backend-service
            exit
          EOF
      - name: Verify Availability of Backend
        run:  |
          curl --silent --fail $SUT_IP_ADDRESS:15550/health || exit 1

      
     
